@model BE.Models.CartViewModel
@using System.Globalization
@using Microsoft.AspNetCore.Identity

@{
    ViewData["Title"] = "Shopping Cart - BE.";
    Layout = "_Layout";
}

<div class="cart-container">
    <div id="cartPageMessageDisplay" style="padding: 10px; margin: 10px; border-radius: 5px; text-align: center; display: none;"></div>

    <div class="cart-content">
        <div class="cart-items-container">
            <div class="cart-header">
                <a href="/Shop/Shop" class="back-button">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 12H5" stroke="#FF6A00" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M12 19L5 12L12 5" stroke="#FF6A00" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </a>
                <h4>Your Shopping Cart (<span id="cartItemCount">@Model.Items.Count</span> @(Model.Items.Count == 1 ? "item" : "items"))</h4>
            </div>
            <div class="cart-table-header">
                <div class="select-all">
                    <span class="select-all-text">PRODUCT</span>
                </div>
                <div class="quantity-header">QUANTITY</div>
                <div class="total-header">TOTAL</div>
            </div>

            <div class="divider"></div>

            <div id="cart-items-list-page">
                @* Content will be dynamically rendered by JavaScript based on updateCartPageDisplay() *
                @* Initial rendering is now handled by JS on DOMContentLoaded to ensure dynamic handling *@
            </div> @* END cart-items-list-page *@

            <div class="divider"></div>
        </div>

        <div class="cart-summary">
            <div class="summary-header">SUMMARY</div>

            <div class="promo-code">
                <div class="promo-label">Do you have a promo code</div>
                <div class="promo-divider"></div>
            </div>

            <div class="summary-details">
                <div class="summary-row">
                    <div class="summary-label">Subtotal</div>
                    <div class="summary-value" id="cartPageSubtotal">R @Model.Subtotal.ToString("N2", CultureInfo.GetCultureInfo("en-US"))</div>
                </div>
                <div class="summary-row">
                    <div class="summary-label">Shipping</div>
                    <div class="summary-value" id="cartPageShipping">R @Model.ShippingCost.ToString("N2", CultureInfo.GetCultureInfo("en-US"))</div>
                </div>
                <div class="summary-total">
                    <div class="total-label">Total</div>
                    <div class="total-value" id="cartPageGrandTotal">R @Model.GrandTotal.ToString("N2", CultureInfo.GetCultureInfo("en-US"))</div>
                </div>
            </div>

            <a asp-controller="Checkout" asp-action="Index" class="checkout-btn text-white text-decoration-none d-block text-center">PROCEED TO CHECKOUT</a>
            <button class="paypal-btn">
                <span>Checkout with</span>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20.1 6.8C20.3 5.6 20.1 4.8 19.6 4.1C19 3.3 17.8 3 16.4 3H11.4C11.1 3 10.8 3.2 10.7 3.5L9 13.6C9 13.8 9.1 14 9.3 14.1C9.4 14.1 9.4 14.1 9.5 14.1H12.5C12.6 14.1 12.7 14.1 12.8 14C12.9 14 13 13.9 13 13.8V13.7L13.7 9.6V9.5C13.8 9.2 14 9 14.4 9H15C17.4 9 19.2 8.1 19.8 5.3C20 4.6 20 4.1 20.1 3.7C20 3.8 20.1 4.3 20.1 4.3V4.8C20.1 5.5 20.1 6.2 20.1 6.8Z" fill="#003087" />
                    <path d="M9.5 8.9C9.5 8.8 9.5 8.7 9.6 8.7C9.6 8.6 9.7 8.6 9.8 8.6H13.6C13.9 8.6 14.3 8.6 14.6 8.7C14.7 8.7 14.8 8.7 14.8 8.7C14.9 8.7 15 8.7 15.1 8.8C15.2 8.8 15.2 8.8 15.3 8.8C15.4 8.8 15.4 8.8 15.5 8.9C15.5 8.1 15.5 7.4 15.2 6.8C14.9 6.2 14.4 5.9 13.8 5.9H10.8C10.5 5.9 10.2 6.1 10.1 6.4L9 13.6C9 13.8 9.1 14 9.3 14.1C9.4 14.1 9.4 14.1 9.5 14.1H12.5L13.1 10.4L9.5 8.9Z" fill="#3086C8" />
                    <path d="M20.2 6.8C20.2 6.9 20.2 6.9 20.2 7C19.5 9.8 17.7 10.7 15.3 10.7H14.6C14.3 10.7 14.0 10.9 14.0 11.2L13.2 16.1C13.2 16.3 13.3 16.5 13.5 16.6C13.6 16.6 13.6 16.6 13.7 16.6H16.2C16.4 16.6 16.7 16.4 16.8 16.2V16.1L17.3 13V12.9C17.4 12.7 17.6 12.5 17.9 12.5H18.2C20.3 12.5 21.9 11.7 22.5 9.3C22.7 8.3 22.6 7.4 22.1 6.8C21.8 6.8 21.0 6.8 20.2 6.8Z" fill="#012169" />
                </svg>
            </button>

            <div class="shipping-info">
                <div class="shipping-header">FREE SHIPPING</div>
                <div class="shipping-text">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</div>
            </div>

            <div class="help-section">
                <div class="help-text">NEED HELP?</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get necessary DOM elements
            const cartItemsListPage = document.getElementById('cart-items-list-page');
            const cartItemCountSpan = document.getElementById('cartItemCount');
            const cartPageSubtotal = document.getElementById('cartPageSubtotal');
            const cartPageShipping = document.getElementById('cartPageShipping');
            const cartPageGrandTotal = document.getElementById('cartPageGrandTotal');
            const cartPageMessageDisplay = document.getElementById('cartPageMessageDisplay'); // New message display

            // URLs from server-side (ensure these are available, e.g., in _Layout.cshtml or a global script tag above this)
            const removeCartItemUrl = '@Url.Action("RemoveFromCart", "Cart")';
            const updateCartQuantityUrl = '@Url.Action("UpdateQuantity", "Cart")';
            const getCartDataUrl = '@Url.Action("GetCartData", "Cart")';

            // Function to display temporary messages on the cart page
            function showCartPageMessage(message, isSuccess) {
                cartPageMessageDisplay.textContent = message;
                cartPageMessageDisplay.style.display = 'block';
                if (isSuccess) {
                    cartPageMessageDisplay.style.backgroundColor = '#d4edda'; // Light green for success
                    cartPageMessageDisplay.style.color = '#155724'; // Dark green text
                } else {
                    cartPageMessageDisplay.style.backgroundColor = '#f8d7da'; // Light red for error
                    cartPageMessageDisplay.style.color = '#721c24'; // Dark red text
                }
                setTimeout(() => {
                    cartPageMessageDisplay.style.display = 'none';
                }, 3000); // Hide after 3 seconds
            }

            // Function to fetch and re-render the entire cart display
            async function updateCartPageDisplay() {
                try {
                    const response = await fetch(getCartDataUrl);
                    const data = await response.json();

                    // Update item count in header
                    cartItemCountSpan.textContent = data.totalItems;

                    // Update main summary
                    cartPageSubtotal.textContent = `R ${data.subtotal.toFixed(2)}`;
                    cartPageShipping.textContent = `R ${data.shippingCost ? data.shippingCost.toFixed(2) : (0).toFixed(2)}`;
                    cartPageGrandTotal.textContent = `R ${(data.subtotal + (data.shippingCost || 0)).toFixed(2)}`;

                    cartItemsListPage.innerHTML = ''; // Clear current items

                    if (data.hasItems) {
                        let newItemsHtml = '';
                        data.items.forEach(item => {
                            newItemsHtml += `
                                <div class="cart-item-row" data-product-id="${item.productId}">
                                    <div class="item-select">
                                    </div>
                                    <div class="item-image">
                                        <img src="${item.imageUrl}" alt="${item.productName}">
                                    </div>
                                    <div class="item-details">
                                        <div class="item-name">${item.productName}</div>
                                        <div class="item-price">R ${item.price.toFixed(2)}</div>
                                    </div>
                                    <div class="item-quantity">
                                        <form method="post" class="d-flex align-items-center update-quantity-form-page">
                                            <input type="hidden" name="productId" value="${item.productId}" />
                                            <button type="button" class="quantity-btn decrease" aria-label="Decrease quantity" data-action="decrease">
                                                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M5 10H15" stroke="#2B2B2B" stroke-width="1.5" stroke-linecap="round" />
                                                </svg>
                                            </button>
                                            <input type="text" value="${item.quantity}" class="quantity-input" readonly>
                                            <button type="button" class="quantity-btn increase" aria-label="Increase quantity" data-action="increase">
                                                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M10 5V15" stroke="#2B2B2B" stroke-width="1.5" stroke-linecap="round" />
                                                    <path d="M5 10H15" stroke="#2B2B2B" stroke-width="1.5" stroke-linecap="round" />
                                                </svg>
                                            </button>
                                            <input type="hidden" name="__RequestVerificationToken" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                                        </form>
                                    </div>
                                    <div class="item-total">R ${item.totalPrice.toFixed(2)}</div>
                                    <div class="item-remove">
                                        <form method="post" class="remove-from-cart-form-page">
                                            <input type="hidden" name="productId" value="${item.productId}" />
                                            <button type="submit" class="remove-btn" aria-label="Remove item">
                                                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M5 5L15 15" stroke="#2B2B2B" stroke-width="1.5" stroke-linecap="round" />
                                                    <path d="M15 5L5 15" stroke="#2B2B2B" stroke-width="1.5" stroke-linecap="round" />
                                                </svg>
                                            </button>
                                            <input type="hidden" name="__RequestVerificationToken" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                                        </form>
                                    </div>
                                </div>
                            `;
                        });
                        cartItemsListPage.insertAdjacentHTML('beforeend', newItemsHtml);

                        // RE-ATTACH EVENT LISTENERS AFTER RENDERING NEW HTML
                        attachCartFormListeners();

                    } else {
                        // Cart is empty
                        cartItemsListPage.innerHTML = `
                            <div class="text-center p-5 empty-cart-message-page">
                                <p class="lead">Your cart is empty. <a href="/Shop/Shop">Continue Shopping</a></p>
                            </div>
                        `;
                        cartPageSubtotal.textContent = `R 0.00`;
                        cartPageShipping.textContent = `R 0.00`;
                        cartPageGrandTotal.textContent = `R 0.00`;
                    }

                } catch (error) {
                    console.error('Error updating cart page display:', error);
                    showCartPageMessage('Error updating cart display. Please refresh the page.', false);
                }
            }


            // Central function to attach listeners to all forms (called initially and after re-render)
            function attachCartFormListeners() {
                const removeForms = document.querySelectorAll('.remove-from-cart-form-page');
                const updateForms = document.querySelectorAll('.update-quantity-form-page');

                removeForms.forEach(form => {
                    // Clone and replace the form to remove all previous listeners, then re-attach
                    const newForm = form.cloneNode(true);
                    form.parentNode.replaceChild(newForm, form);
                    newForm.addEventListener('submit', handleRemoveSubmit);
                });

                updateForms.forEach(form => {
                    // Clone and replace the form to remove all previous listeners, then re-attach
                    const newForm = form.cloneNode(true);
                    form.parentNode.replaceChild(newForm, form);

                    // Attach specific click listeners to the buttons within the new form
                    newForm.querySelectorAll('.quantity-btn').forEach(button => {
                        button.removeEventListener('click', handleQuantityButtonClick); // Prevent multiple listeners
                        button.addEventListener('click', handleQuantityButtonClick);
                    });
                });
            }


            async function handleRemoveSubmit(event) {
                event.preventDefault(); // Prevent default page reload

                const formData = new FormData(this); // Get all form data, including token

                try {
                    const response = await fetch(removeCartItemUrl, { // Use pre-defined URL
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json(); // Parse JSON response

                    if (data.success) {
                        console.log('Removed item:', data.message);
                        showCartPageMessage(data.message, true); // Use new message display
                        updateCartPageDisplay(); // Refresh the entire cart page display
                    } else {
                        showCartPageMessage(data.message, false); // Use new message display for errors
                    }
                } catch (error) {
                    console.error('Error removing item:', error);
                    showCartPageMessage('Failed to remove item. Please try again.', false);
                }
            }

            // New function to handle quantity button clicks
            async function handleQuantityButtonClick(event) {
                event.preventDefault(); // Prevent default form submission via button click

                const button = event.currentTarget; // The clicked button (increase or decrease)
                const form = button.closest('form'); // The parent form
                const productId = form.querySelector('input[name="productId"]').value;
                const quantityInput = form.querySelector('.quantity-input');
                let currentQuantity = parseInt(quantityInput.value);
                const action = button.dataset.action; // 'increase' or 'decrease'

                let newQuantity;
                if (action === 'increase') {
                    newQuantity = currentQuantity + 1;
                } else if (action === 'decrease') {
                    newQuantity = currentQuantity - 1;
                } else {
                    console.error('Unknown quantity action:', action);
                    return;
                }

                // If newQuantity is 0 or less, we want to trigger remove.
                // The backend handles this by removing the item if newQuantity <= 0.
                // We'll just send the newQuantity, and the backend will decide.

                const formData = new FormData();
                formData.append('productId', productId);
                formData.append('newQuantity', newQuantity);
                formData.append('__RequestVerificationToken', form.querySelector('input[name="__RequestVerificationToken"]').value);

                try {
                    const response = await fetch(updateCartQuantityUrl, {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();

                    if (data.success) {
                        console.log('Updated quantity:', data.message);
                        showCartPageMessage(data.message, true);
                        updateCartPageDisplay();
                    } else {
                        showCartPageMessage(data.message, false);
                    }
                } catch (error) {
                    console.error('Error updating quantity:', error);
                    showCartPageMessage('Failed to update quantity. Please try again.', false);
                }
            }

            // Initial call to update and attach listeners when the page loads
            updateCartPageDisplay();
        });
    </script>
}